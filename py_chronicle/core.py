# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['read_chronicle', 'describe_measures', 'get_metric_values', 'plot_metric_values']

# %% ../nbs/00_core.ipynb 3
import polars as pl
import pyarrow.parquet as pq
import pyarrow.dataset as ds
from s3fs import S3FileSystem
import pandas as pd
import plotly.express as px
# import plotly

# %% ../nbs/00_core.ipynb 5
def read_chronicle(
        dataset: str # Path to dataset
    ) -> pl.DataFrame:
    "Read a chronicle parquet file into a polars dataframe."
    return pl.from_arrow(pq.read_table(dataset))

# %% ../nbs/00_core.ipynb 8
def describe_measures(
        x: pl.DataFrame # metrics dataframe
    ) -> pd.DataFrame:
    "Reads metrics dataframe and returns a pandas dataframe with summary of service, name and description of all metrics"
    return (
        x
        .groupby("service", "name")
        .agg(
            pl.col("description").unique(),
            pl.col("value_column").unique(),
        )
        .sort("service", "name")
        .to_pandas()
    )

# %% ../nbs/00_core.ipynb 11
def get_metric_values(
        x:pl.DataFrame, # metrics dataframe
        name:str, # name of metric to extract
        alias:str # alias to use for new column
    ) -> pd.DataFrame:
    "Extract a single metric from a metrics dataframe"
    return (
        x
        .lazy()
        .filter(pl.col("name") == name)
        .sort(pl.col("host"), pl.col("timestamp"))
        .select([
            "host",
            pl.col("timestamp"),
            pl.col("value_float").alias(alias)
        ])
        .collect()
        .to_pandas()
    )

# %% ../nbs/00_core.ipynb 13
def plot_metric_values(
        x:pl.DataFrame, # metrics dataframe
        name:str, # name of metric to extract
        alias:str # alias to use for new column
    ) -> px.line: 
    "Plot a selected metric using a Plotly line plot"

    dat = get_metric_values(x, name, alias) 
    fig = px.line(dat, x='timestamp', y=alias, line_group="host", color="host")
    return fig
