# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/plot.ipynb.

# %% auto 0
__all__ = []

# %% ../nbs/plot.ipynb 3
from fastcore.basics import patch
from .core import scan_chronicle_metrics, ChronicleMetrics
# import plotly.express as px

# %% ../nbs/plot.ipynb 5
import plotly.graph_objects as go
from .core import ChronicleMetrics
@patch
def plot(
        self:ChronicleMetrics, # metrics dataframe
        name:str, # name of metric to extract
        service:str = None, # service to extract metric from
        title:str = None, # title of plot
        alias:str = None, # alias to use for new column
        sparkline: bool = None, # whether to use sparkline
    ) -> go.Figure:
    "Plot a selected metric using a Plotly line plot"

    if alias == None:
        alias
    if title == None:
        title = name
    if sparkline == None:
        sparkline = False
    
    dat = self._ldf.metrics.filter(name, service=service, alias=alias)
    # return dat

    groups = dat.groupby("host")
    # return(groups)
    fig = go.Figure()

    for gname, group in groups:
        # print(f"gname = {gname}")

        fig.add_trace(go.Scatter(
            x=group['timestamp'], 
            y=group[alias], 
            name=gname,
            fill = 'tozeroy',
        ))
    
    if sparkline:
        fig.update_layout(
            showlegend=False,
            xaxis=dict(showgrid=False, showticklabels=False, zeroline=False, visible=False),
            yaxis=dict(showgrid=False, showticklabels=False, zeroline=False, visible=False),
            title=None,
            margin=dict(l=0, r=0, t=0, b=0),
            paper_bgcolor=None,
            plot_bgcolor=None,
        )
    else:
        fig.update_layout(
            showlegend=False,
        )
    
    return fig


